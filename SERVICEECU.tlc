%% File : SERVICEECU.tlc
%% Created : Wed Sep 10 15:22:46 2025
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "SERVICEECU.cpp".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  SERVICEECU "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) void
    %assign int32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_INT32)
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "SERVICEECU_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    %<LibEmitPlatformTypeIncludes()>
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void SERVICEECU_Start_wrapper_accel(void);
    SFB_EXTERN_C void SERVICEECU_Outputs_wrapper_accel(const %<doubleType> *sensorCabineTemp,
			const %<doubleType> *targetPosition,
			const %<doubleType> *FlapMotorPosition,
			const %<doubleType> *sensorSun,
			const %<doubleType> *blowerMotorCurrent,
			const %<doubleType> *sensorAirQuality,
			const %<int32Type> *evaporatorSensorOpenCircuit,
			const %<doubleType> *evaporatorTemp,
			const %<doubleType> *fanSpeed,
			const %<int32Type> *VIN,
			const %<doubleType> *time,
			const %<doubleType> *value,
			const %<int32Type> *functionCode,
			const %<int32Type> *code,
			const %<int32Type> *serviceId,
			%<int32Type> *response,
			%<int32Type> *responseStatusCode);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "SERVICEECU_accel_wrapper"
    %openfile cFile = "%<cFileName>.cpp"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    %<LibEmitPlatformTypeIncludes()>
    #endif
    #include "%<hFileName>.h"
    

    extern void SERVICEECU_Start_wrapper(void);
    extern void SERVICEECU_Outputs_wrapper(const %<doubleType> *sensorCabineTemp,
			const %<doubleType> *targetPosition,
			const %<doubleType> *FlapMotorPosition,
			const %<doubleType> *sensorSun,
			const %<doubleType> *blowerMotorCurrent,
			const %<doubleType> *sensorAirQuality,
			const %<int32Type> *evaporatorSensorOpenCircuit,
			const %<doubleType> *evaporatorTemp,
			const %<doubleType> *fanSpeed,
			const %<int32Type> *VIN,
			const %<doubleType> *time,
			const %<doubleType> *value,
			const %<int32Type> *functionCode,
			const %<int32Type> *code,
			const %<int32Type> *serviceId,
			%<int32Type> *response,
			%<int32Type> *responseStatusCode);
    extern void SERVICEECU_Terminate_wrapper(void);
    void SERVICEECU_Start_wrapper_accel(void){
    SERVICEECU_Start_wrapper();
    }
    void SERVICEECU_Outputs_wrapper_accel(const %<doubleType> *sensorCabineTemp,
			const %<doubleType> *targetPosition,
			const %<doubleType> *FlapMotorPosition,
			const %<doubleType> *sensorSun,
			const %<doubleType> *blowerMotorCurrent,
			const %<doubleType> *sensorAirQuality,
			const %<int32Type> *evaporatorSensorOpenCircuit,
			const %<doubleType> *evaporatorTemp,
			const %<doubleType> *fanSpeed,
			const %<int32Type> *VIN,
			const %<doubleType> *time,
			const %<doubleType> *value,
			const %<int32Type> *functionCode,
			const %<int32Type> *code,
			const %<int32Type> *serviceId,
			%<int32Type> *response,
			%<int32Type> *responseStatusCode){
    SERVICEECU_Outputs_wrapper(sensorCabineTemp,
			targetPosition,
			FlapMotorPosition,
			sensorSun,
			blowerMotorCurrent,
			sensorAirQuality,
			evaporatorSensorOpenCircuit,
			evaporatorTemp,
			fanSpeed,
			VIN,
			time,
			value,
			functionCode,
			code,
			serviceId,
			response,
			responseStatusCode);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %else
    %assign hFileName = "SERVICEECU_cgen_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    %<LibEmitPlatformTypeIncludes()>
    #endif
    
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void SERVICEECU_Start_wrapper_cgen(void);
    SFB_EXTERN_C void SERVICEECU_Outputs_wrapper_cgen(const %<doubleType> *sensorCabineTemp,
			const %<doubleType> *targetPosition,
			const %<doubleType> *FlapMotorPosition,
			const %<doubleType> *sensorSun,
			const %<doubleType> *blowerMotorCurrent,
			const %<doubleType> *sensorAirQuality,
			const %<int32Type> *evaporatorSensorOpenCircuit,
			const %<doubleType> *evaporatorTemp,
			const %<doubleType> *fanSpeed,
			const %<int32Type> *VIN,
			const %<doubleType> *time,
			const %<doubleType> *value,
			const %<int32Type> *functionCode,
			const %<int32Type> *code,
			const %<int32Type> *serviceId,
			%<int32Type> *response,
			%<int32Type> *responseStatusCode);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "SERVICEECU_cgen_wrapper"
    %openfile cFile = "%<cFileName>.cpp"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    %<LibEmitPlatformTypeIncludes()>
    #endif
    #include "%<hFileName>.h"

	extern void SERVICEECU_Start_wrapper(void);
	extern void SERVICEECU_Outputs_wrapper(const %<doubleType> *sensorCabineTemp,
			const %<doubleType> *targetPosition,
			const %<doubleType> *FlapMotorPosition,
			const %<doubleType> *sensorSun,
			const %<doubleType> *blowerMotorCurrent,
			const %<doubleType> *sensorAirQuality,
			const %<int32Type> *evaporatorSensorOpenCircuit,
			const %<doubleType> *evaporatorTemp,
			const %<doubleType> *fanSpeed,
			const %<int32Type> *VIN,
			const %<doubleType> *time,
			const %<doubleType> *value,
			const %<int32Type> *functionCode,
			const %<int32Type> *code,
			const %<int32Type> *serviceId,
			%<int32Type> *response,
			%<int32Type> *responseStatusCode);
	 void SERVICEECU_Start_wrapper_cgen(void) {
	SERVICEECU_Start_wrapper();
	}
	 void SERVICEECU_Outputs_wrapper_cgen(const %<doubleType> *sensorCabineTemp,
			const %<doubleType> *targetPosition,
			const %<doubleType> *FlapMotorPosition,
			const %<doubleType> *sensorSun,
			const %<doubleType> *blowerMotorCurrent,
			const %<doubleType> *sensorAirQuality,
			const %<int32Type> *evaporatorSensorOpenCircuit,
			const %<doubleType> *evaporatorTemp,
			const %<doubleType> *fanSpeed,
			const %<int32Type> *VIN,
			const %<doubleType> *time,
			const %<doubleType> *value,
			const %<int32Type> *functionCode,
			const %<int32Type> *code,
			const %<int32Type> *serviceId,
			%<int32Type> *response,
			%<int32Type> *responseStatusCode) {
	SERVICEECU_Outputs_wrapper(sensorCabineTemp,
			targetPosition,
			FlapMotorPosition,
			sensorSun,
			blowerMotorCurrent,
			sensorAirQuality,
			evaporatorSensorOpenCircuit,
			evaporatorTemp,
			fanSpeed,
			VIN,
			time,
			value,
			functionCode,
			code,
			serviceId,
			response,
			responseStatusCode);
	}
    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %openfile externs

    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif

    SFB_EXTERN_C void SERVICEECU_Start_wrapper(void);

    SFB_EXTERN_C void SERVICEECU_Outputs_wrapper(const %<doubleType> *sensorCabineTemp,
			const %<doubleType> *targetPosition,
			const %<doubleType> *FlapMotorPosition,
			const %<doubleType> *sensorSun,
			const %<doubleType> *blowerMotorCurrent,
			const %<doubleType> *sensorAirQuality,
			const %<int32Type> *evaporatorSensorOpenCircuit,
			const %<doubleType> *evaporatorTemp,
			const %<doubleType> *fanSpeed,
			const %<int32Type> *VIN,
			const %<doubleType> *time,
			const %<doubleType> *value,
			const %<int32Type> *functionCode,
			const %<int32Type> *code,
			const %<int32Type> *serviceId,
			%<int32Type> *response,
			%<int32Type> *responseStatusCode);

    SFB_EXTERN_C void SERVICEECU_Terminate_wrapper(void);

    #undef SFB_EXTERN_C
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction


%% Function: Start ============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    SERVICEECU_Start_wrapper_accel();
  %else
    SERVICEECU_Start_wrapper_cgen();
  %endif

%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign pu5 = LibBlockInputSignalAddr(5, "", "", 0)
  %assign pu6 = LibBlockInputSignalAddr(6, "", "", 0)
  %assign pu7 = LibBlockInputSignalAddr(7, "", "", 0)
  %assign pu8 = LibBlockInputSignalAddr(8, "", "", 0)
  %assign pu9 = LibBlockInputSignalAddr(9, "", "", 0)
  %assign pu10 = LibBlockInputSignalAddr(10, "", "", 0)
  %assign pu11 = LibBlockInputSignalAddr(11, "", "", 0)
  %assign pu12 = LibBlockInputSignalAddr(12, "", "", 0)
  %assign pu13 = LibBlockInputSignalAddr(13, "", "", 0)
  %assign pu14 = LibBlockInputSignalAddr(14, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    SERVICEECU_Outputs_wrapper_accel(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<pu5>, %<pu6>, %<pu7>, %<pu8>, %<pu9>, %<pu10>, %<pu11>, %<pu12>, %<pu13>, %<pu14>, %<py0>, %<py1>);
  %else
    SERVICEECU_Outputs_wrapper_cgen(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<pu5>, %<pu6>, %<pu7>, %<pu8>, %<pu9>, %<pu10>, %<pu11>, %<pu12>, %<pu13>, %<pu14>, %<py0>, %<py1>);
  %endif

  %%
%endfunction


%% [EOF] SERVICEECU.tlc

